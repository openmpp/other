#!/usr/bin/env bash
#
# build and run openM++ model
#
# environmemnt variables:
#
# OM_ROOT                   default: ..\..
# OM_BUILD_CONFIGS=Debug    default: Release
# OM_MSG_USE=MPI            default: EMPTY
# MODEL_DIR            if not empty then model source code directory
# MODEL_GIT_URL        if not empty then git URL of model source code
# MODEL_GIT_TAG        if not empty then git tag
# MODEL_INI            if not empty then run model after build with this model ini file
# MODEL_DOC_DISABLE=0  if =0 or =false then make model documentation, default: MODEL_DOC_DISABLE=1

# ONCOSIM_VARIANT      if not empty then model variant: breast gmm cervical colorectal lung allcancers

# MODEL_NAME by default: OncoSim or OncoSim-%ONCOSIM_VARIANT%
# MODEL_DIR  by default: OM_ROOT/models/OncoSim

# if MODEL_DIR not exists and MODEL_GIT_URL specified then do git clone model source code
# if MODEL_DIR exists then it must contain code/src-OncoSimX_variants.ompp.txt == copy of original code/OncoSimX_variants.ompp

#
# set openM++ root folder 
#
self=$(basename "$0")
sd=$(dirname "$0")

[ -z "$OM_ROOT" ] && OM_ROOT="${sd}/../.."

if [ ! -d "${OM_ROOT}" ] || [ ! -x "$OM_ROOT/bin/omc" ] ;
then
  echo "ERROR: invalid OM_ROOT = $OM_ROOT"
  exit 1
fi

# make absolute directory path if directory path is relative
# it removes last / or last /.
# it does not normalize path and it does not check if path exists
#
# openmpp/mdls/    => /home/user/openmpp/mdls
# openmpp/mdls/.   => /home/user/openmpp/mdls
# openmpp/mdls/..  => /home/user/openmpp/mdls/..
# .                => /home/user
# ..               => /home/user/..
# /openmpp/mdls/   => /openmpp/mdls
# /openmpp/mdls/.  => /openmpp/mdls
# /openmpp/mdls/.. => /openmpp/mdls/..
# /                => empty result
# /.               => empty result
#
do_abspath()
{
  wd="$PWD"
  [ "$PWD" = "/" ] && wd=""

  case "$1" in
    /*) d="${1}"
    ;;
    *)  d="$wd/${1#./}"
    ;;
  esac

  d="${d%/}"
  d="${d%/.}"

  echo "$d"
}

OM_ROOT=$(do_abspath "$OM_ROOT")

echo "OM_ROOT = $OM_ROOT"

# ONCOSIM_VARIANT if not empty must be one of: breast gmm cervical colorectal lung allcancers

if [ -n "$ONCOSIM_VARIANT" ];
then
  case "$ONCOSIM_VARIANT" in
    (breast | gmm | cervical | colorectal | lung | allcancers)
    ;;
    *)
      echo ERROR: invalid ONCOSIM_VARIANT "$ONCOSIM_VARIANT"
      exit 1
    ;;
  esac
fi

# MODEL_NAME by default: OncoSim or OncoSim-%ONCOSIM_VARIANT%

if [ -z "$MODEL_NAME" ];
then
  MODEL_NAME=OncoSim
  [ -n "$ONCOSIM_VARIANT" ] && MODEL_NAME=OncoSim-$ONCOSIM_VARIANT
fi

if [ "$MODEL_NAME" = "." ] || [ "$MODEL_NAME" = ".." ] || [ "$MODEL_NAME" = "/" ] ;
then
  echo ERROR: invalid MODEL_NAME "$MODEL_NAME"
  exit 1
fi

# MODEL_DIR  by default: OM_ROOT/models/OncoSim

[ -z "$MODEL_DIR" ]  && MODEL_DIR="$OM_ROOT/models/OncoSim"

if [ -z "$MODEL_DIR" ] || [ "$MODEL_DIR" = "/" ] ;
then
  echo ERROR: invalid or empty MODEL_DIR "$MODEL_DIR"
  exit 1
fi

MODEL_DIR=$(do_abspath "$MODEL_DIR")

# make an absolute path to ini-file 

if [ -n "$MODEL_INI" ];
then
  ini_dir=$(do_abspath $(dirname "$MODEL_INI"))
  MODEL_INI="${ini_dir}/"$(basename "$MODEL_INI")
fi

# set default build configuration

export MODEL_NAME="$MODEL_NAME"
export MODEL_INI="$MODEL_INI"

OM_BLD_CFG=${OM_BUILD_CONFIGS:-RELEASE}

if [ "$OM_BLD_CFG" != 'RELEASE' ] && [ "$OM_BLD_CFG" != 'DEBUG' ];
then
  echo Error: incorrect value: $OM_BLD_CFG, it must be one of: RELEASE or DEBUG
  exit 1
fi

if [ -n "$OM_MSG_USE" ] && [ "$OM_MSG_USE" != 'EMPTY' ] && [ "$OM_MSG_USE" != 'MPI' ];
then
  echo Error: incorrect value: $OM_MSG_USE, it must be one of: MPI or EMPTY
  exit 1
fi

[ "$OM_MSG_USE" = 'MPI' ] && OM_P_MPI="OM_MSG_USE=MPI" || OM_P_MPI=

if [ "$MODEL_DOC_DISABLE" == '0' ] || [ "$MODEL_DOC_DISABLE" == 'false' ] || [ "$MODEL_DOC_DISABLE" == 'FALSE' ];
then
  export MODEL_DOC_DISABLE=
else
  export MODEL_DOC_DISABLE=1
fi

# log build environment 

if [ ! -d "$OM_ROOT/log" ]; then mkdir log; fi

LOG_PATH="$OM_ROOT/log/make-${MODEL_NAME}.log"

echo Log file: $LOG_PATH
echo `date` Make $MODEL_NAME model | tee "$LOG_PATH"
echo Environment: | tee -a "$LOG_PATH"
echo "OM_ROOT            = $OM_ROOT" | tee -a "$LOG_PATH"
echo "MODEL_NAME         = $MODEL_NAME" | tee -a "$LOG_PATH"
echo "MODEL_DIR          = $MODEL_DIR" | tee -a "$LOG_PATH"
echo "OM_BUILD_CONFIGS   = $OM_BLD_CFG" | tee -a "$LOG_PATH"
echo "OM_MSG_USE         = $OM_MSG_USE" | tee -a "$LOG_PATH"
echo "MODEL_GIT_URL      = ${MODEL_GIT_URL}" | tee -a "$LOG_PATH"
echo "MODEL_GIT_TAG      = $MODEL_GIT_TAG" | tee -a "$LOG_PATH"
echo "OM_ROOT            = $OM_ROOT" | tee -a "$LOG_PATH"
echo "MODEL_INI          = $MODEL_INI" | tee -a "$LOG_PATH"
echo "ONCOSIM_VARIANT    = $ONCOSIM_VARIANT" | tee -a "$LOG_PATH"
if [ -z "$OM_P_MPI" ]; then
  echo Build desktop version: non-MPI | tee -a "$LOG_PATH"
else
  echo Build cluster version: using MPI | tee -a "$LOG_PATH"
fi

[ -z "$MODEL_DOC_DISABLE" ] && echo Build model documentation | tee -a "$LOG_PATH"

# if MODEL_DIR not exists and MODEL_GIT_URL specified then do git clone model source code
# copy OncoSimX_variants.ompp => src-OncoSimX_variants.ompp.txt

if [ -d "$MODEL_DIR" ];
then
  echo Skip: git clone
else

  if [ -n "${MODEL_GIT_URL}" ];
  then
    echo git clone ${MODEL_GIT_URL} "${MODEL_DIR}" | tee -a "$LOG_PATH"
    
    if ! git clone ${MODEL_GIT_URL} "${MODEL_DIR}" >> "$LOG_PATH" 2>&1;
    then
      echo FAILED git clone | tee -a "$LOG_PATH"
      exit 1
    fi
  fi

  pushd "$MODEL_DIR"

  if [ -n "$MODEL_GIT_TAG" ];
  then

    echo "git checkout $MODEL_GIT_TAG" | tee -a "$LOG_PATH"

    if ! git checkout "$MODEL_GIT_TAG" >> "$LOG_PATH" 2>&1;
    then
      echo FAILED git checkout "$MODEL_GIT_TAG" | tee -a "$LOG_PATH"
      exit 1
    fi

  fi

  # copy OncoSimX_variants.ompp => src-OncoSimX_variants.ompp.txt
  
  echo "cp -p code/OncoSimX_variants.ompp code/src-OncoSimX_variants.ompp.txt" | tee -a "$LOG_PATH"

  if ! cp -p code/OncoSimX_variants.ompp code/src-OncoSimX_variants.ompp.txt | tee -a "$LOG_PATH"
  then
    echo FAILED. | tee -a "$LOG_PATH"
    exit 1
  fi

  popd
fi

# check if model source code directory exist

if [ ! -d "$MODEL_DIR" ];
then
  echo "ERROR: missing source code directory: $MODEL_DIR" | tee -a "$LOG_PATH"
  exit 1
fi

# check if OncoSim variants file exist and it contains //begin-variant and //end-variant lines
#
check_variant_begin_end()
{
  src_ompp=$1

  if ! [ -f "$src_ompp" ];
  then
    echo ERROR: OncoSim variants file not found: "$src_ompp" | tee -a "$LOG_PATH"
    exit 1
  fi
  
  echo search for: "//begin-${ONCOSIM_VARIANT}" and: "//end-${ONCOSIM_VARIANT}" in: "$src_ompp" | tee -a "$LOG_PATH"
  
  if [ -z "$ONCOSIM_VARIANT" ];
  then
    echo ERROR: invalid ONCOSIM_VARIANT "$ONCOSIM_VARIANT" | tee -a "$LOG_PATH"
    exit 1
  fi
  
  n_begin=$(grep -n -m1 -F "//begin-${ONCOSIM_VARIANT}" "$src_ompp" |cut -d: -f1)
  if [ $? -ne 0 ];
  then
    echo ERROR at search of "//begin-${ONCOSIM_VARIANT}" | tee -a "$LOG_PATH"
    exit 1
  fi

  n_end=$(grep -n -m1 -F "//end-${ONCOSIM_VARIANT}" "$src_ompp" |cut -d: -f1)
  if [ $? -ne 0 ];
  then
    echo ERROR at search of "//end-${ONCOSIM_VARIANT}" | tee -a "$LOG_PATH"
    exit 1
  fi

  if [ -z "$n_begin" ] || [ -z "$n_end" ] || [ $n_end -le $n_begin ];
  then
    echo ERROR: missing or invalid position of "//begin-${ONCOSIM_VARIANT}" $n_begin or "//end-${ONCOSIM_VARIANT}" $n_end | tee -a "$LOG_PATH"
    exit 1
  fi
  
  echo "$n_begin": "//begin-${ONCOSIM_VARIANT}" "$n_end": "//end-${ONCOSIM_VARIANT}" | tee -a "$LOG_PATH"
}

# make source files to build OncoSim variant
#
if [ -n "$ONCOSIM_VARIANT" ];
then

  pushd "$MODEL_DIR"

  check_variant_begin_end "code/src-OncoSimX_variants.ompp.txt"

  # uncomment cancer variant by copy from src-OncoSimX_variants.ompp.txt into OncoSimX_variants.ompp

  [ "$ONCOSIM_VARIANT" == "breast" ]     && pt='/\/\/begin-breast*./,/\/\/end-breast/!b'
  [ "$ONCOSIM_VARIANT" == "gmm" ]        && pt='/\/\/begin-gmm*./,/\/\/end-gmm/!b'
  [ "$ONCOSIM_VARIANT" == "cervical" ]   && pt='/\/\/begin-cervical*./,/\/\/end-cervical/!b'
  [ "$ONCOSIM_VARIANT" == "colorectal" ] && pt='/\/\/begin-colorectal*./,/\/\/end-colorectal/!b'
  [ "$ONCOSIM_VARIANT" == "lung" ]       && pt='/\/\/begin-lung*./,/\/\/end-lung/!b'
  [ "$ONCOSIM_VARIANT" == "allcancers" ] && pt='/\/\/begin-allcancers*./,/\/\/end-allcancers/!b'
  if [ -z "$pt" ];
  then
    echo ERROR: invalid ONCOSIM_VARIANT "$ONCOSIM_VARIANT"
    exit 1
  fi

  echo "sed -e $pt -e 's/^\/\///' code/src-OncoSimX_variants.ompp.txt into code/OncoSimX_variants.ompp" | tee -a "$LOG_PATH"

  sed -e $pt -e 's/^\/\///' code/src-OncoSimX_variants.ompp.txt >code/OncoSimX_variants.ompp
  if [ $? -ne 0 ];
  then
    echo FAILED sed $pt code/src-OncoSimX_variants.ompp.txt.... | tee -a "$LOG_PATH"
    exit 1
  fi

  # copy CancerModeChoice for that variant
  
  onco_cm_src=CancerModeChoice.dat.INDEPTH.txt
  [ "$ONCOSIM_VARIANT" == "allcancers" ] && onco_cm_src=CancerModeChoice.dat.ALLCANCERS.txt
  
  echo "cp -p parameters/Default/$onco_cm_src parameters/Default/CancerModeChoice.dat" | tee -a "$LOG_PATH"

  if ! cp -p "parameters/Default/$onco_cm_src" parameters/Default/CancerModeChoice.dat | tee -a "$LOG_PATH"
  then
    echo FAILED. | tee -a "$LOG_PATH"
    exit 1
  fi

  popd
fi

# build model

pushd "$MODEL_DIR"

[ "$OM_BLD_CFG" = 'RELEASE' ] && OM_P_RLS="RELEASE=1" || OM_P_RLS=

echo make $OM_P_RLS $OM_P_MPI all publish

if ! make $OM_P_RLS $OM_P_MPI all publish >> "$LOG_PATH" 2>&1;
then
  echo FAILED: make $OM_P_RLS $OM_P_MPI all publish | tee -a "$LOG_PATH"
  exit 1
fi

# run the model if model ini-file specified

if [ -n "$MODEL_INI" ];
then

  mdl_exe="$MODEL_NAME"
  [ "$OM_BLD_CFG" = 'RELEASE' ] || mdl_exe="$mdl_exe"D
  [ "$OM_MSG_USE" = 'MPI' ] &&  mdl_exe="$mdl_exe"_mpi

  pushd ompp-linux/bin

  echo ./"$mdl_exe" -ini "$MODEL_INI" | tee -a "$LOG_PATH"
  
  if ! ./"$mdl_exe" -ini "$MODEL_INI" >> "$LOG_PATH" 2>&1;
  then
    echo FAILED: ./"$mdl_exe" -ini "$MODEL_INI" | tee -a "$LOG_PATH"
    exit 1
  fi

 popd
fi

popd

echo `date` Done. | tee -a "$LOG_PATH"
